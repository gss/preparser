{
  var p, parser, flatten, idPrefix; 
  p = parser = this;

  String.prototype.trim = String.prototype.trim || function trim() { return this.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); };

  flatten = parser.flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }

  p.results = [];

  p.stringify = function (array) {
    return flatten(array).join("").trim();
  };

  p.trim = function (x) {
    if (typeof x === "string") {return x.trim();}
    if (x instanceof Array) {return x.join("").trim();}
    return ""
  };

}

start
  = statements

statements
  = LineTerminator* s:(statement)+ LineTerminator* {return s}
  / _

statement "Statement"
  = Ruleset  
  / gssBlob
  / Directive 
  / cssLine  

nestedStatement "Nested Statement"
  = Ruleset    
  / gssBlob
  / Directive 
  / ContextualCCSSLine
  / cssLine    

nestedStatements
  = LineTerminator* s:(nestedStatement)* LineTerminator* {return s}
  / _


gssBlob
  = ccss  
  
  // gtl
  // vfl


ccss "CCSS"
  = ccss:(_ ccssStartChar+ _ ccssOp anytoend)  { 
    return {type:'constraint', cssText: p.stringify(ccss)}; 
  }
  / stay:( _ "@" ("-gss-")? "stay" anytoend)    { 
    return {type:'constraint', cssText: p.stringify(stay)}; 
  }
  / chain:( _ "@" ("-gss-")? "chain" anytoend)    { 
    return {type:'constraint', cssText: p.stringify(chain)}; 
  }
  / forlooper:( _ "@" ("-gss-")? ("for-each" / "for-all") [^`]+ "```" [^`]+ "```" anytoend) { 
    return {type:'constraint', cssText: p.stringify(forlooper)}; 
  }

ccssStartChar
  = [a-zA-Z0-9_#.\[\]\-""' *+/$^~%\\()~]
  // have to specially handle colons
  / "::"
  / ":" [a-zA-Z0-9_\-]+ "(" // for pseudo selectors

ccssOp
  = ">=" / "==" / "<=" / "=>" / "=<"

ContextualCCSSLine "Contextual CCSS Statement"
  = _ prop:[a-zA-Z0-9\-_$]+ _ ":" _ op:ccssOp tail:anytoend  {
      return {type:'constraint', cssText: "::["+p.trim(prop)+"]"+" "+op+" "+p.stringify(tail)};
    }

cssLine "CSS Line"
   = _ key:TextToColon val:TextToSemicolon { return {type:'style', key:key, val:val}; }

vfl
  = vfl:( _ ("@-gss-" / "@") ("horizontal" / "vertical" / "h" / "v") anytoend)    { return ['vfl', parser.stringify(vfl)]; }

gtl
  = gtl:(_ "@-gss-" ("layout" / "template") multitoend)    { return ['gtl', parser.stringify(gtl)]; }

cssBlock
  = block:(anychar+ multitoend)    { return ['css', parser.stringify(block)]; }

Ruleset "Ruleset"
  = _ sel:SelectorList s:BlockedStatements {
    return {type:'ruleset',selectors:sel,rules:s};
  }
  
Directive "Directive"
  = name:DirectiveName terms:[^@{};]* s:BlockedStatements  {
    var o;
    o = {type:'directive',name:p.trim(name),terms:p.trim(terms)};
    if (!!s) {o.rules = s;}
    return o;
  }
  / name:DirectiveName terms:TextToSemicolon {
    var o;
    o = {type:'directive',name:p.trim(name),terms:p.trim(terms)};    
    return o;
  }

DirectiveName "Directive Name"
  = _ "@" name:[a-zA-Z0-9\-\_$]+ {return p.trim(name);}

BlockedStatements "Statement Blocks"
  = _  "{" _ s:nestedStatements _ "}" _ LineTerminator* {return s;}

SelectorList "SelectorList"
  = sel:Selector sels:SelectorListEnd* {return [sel].concat(sels)}

SelectorListEnd
  = _ "," sel:Selector {return sel}

Selector "Selector"
  = _ sel:[^@{},;]+ _ {return sel.join("").trim()}



comment "Comment"
  = _ "/*" [^*]* "*"+ ([^/*] [^*]* "*"+)* "/" _ LineTerminator*  {return ""}

//css
//  = css:(.)+  {return ['css', parser.stringify(css)]}
_
  = space* 

__
  = space+
  
space "Space"
  = " "
  / [\t]
  / [\u00A0] //NO-BREAK SPACE

anychar
  = [a-zA-Z0-9 .,#:+?!^=()_\-$*/\\""']

multitoend "multitoend"
  = [^}]* "}" _ LineTerminator*

anytoend "anytoend"
  = [^;]* ";" _ LineTerminator* 

TextToColon "TextToColon"
  = text:[^:{}]+ ":" _ LineTerminator* {return p.stringify(text)}

TextToSemicolon "TextToSemicolon"
  = text:[^;{}]+ ";" _ LineTerminator* {return p.stringify(text)}

_terminators
  = _ LineTerminator* 

LineTerminator "LineTerminator"
  = ([\n\r\u2028\u2029] / "\r\n") _
  / comment 
  
/*
DEPECRECATED_ToEndIdInjector "ToEndIdInjector"
  = x:(!" name(" [^";"])* ";"  _terminators {return " " + p.stringify(x) + " name(" + p.cid() + ");";}  // inject Name
  / x:(!" name()" [^";"])* ";" _terminators {p.cid(); return " " + p.stringify(x) + ";";} // valid name
  / x:[^;]* ";"              _terminators {return     p.error("Invalid Name, must have value",line,column);} // invalid name
*/
